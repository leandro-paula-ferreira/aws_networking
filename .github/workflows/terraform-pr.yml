name: 'Verifica√ß√µes de Terraform para PR'

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  terraform:
    name: 'Valida√ß√£o de Terraform para PR'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./infra
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configura√ß√£o
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Ferramentas de qualidade de c√≥digo
    - name: Setup TFLint
      uses: terraform-linters/setup-tflint@v3
      with:
        tflint_version: latest

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Run TFLint
      run: |
        tflint --init
        tflint --recursive --format=compact

    # Verifica√ß√µes de Seguran√ßa
    - name: TFSec Security Scan
      uses: aquasecurity/tfsec-action@v1.0.0
      with:
        working_directory: ./infra

    - name: Checkov Security Scan
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ./infra
        framework: terraform

    # Configura√ß√£o da AWS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: us-east-1

    # Valida√ß√£o do Terraform
    - name: Terraform Init
      id: init
      run: terraform init -backend=false

    - name: Terraform Validate
      id: validate
      run: terraform validate

    # Plano do Terraform
    - name: Terraform Plan
      id: plan
      run: |
        # Usar valores de exemplo para vari√°veis de vers√£o durante o PR
        cat > version.auto.tfvars.json << EOF
        {
          "app_version": "vPR-${{ github.event.pull_request.number }}",
          "last_deployed_by": "${{ github.event.pull_request.user.login }} (PR)"
        }
        EOF
        
        terraform plan -no-color -out=tfplan \
          -var="app_version=vPR-${{ github.event.pull_request.number }}" \
          -var="last_deployed_by=${{ github.event.pull_request.user.login }} (PR)"
      continue-on-error: true

    # Exibir plano e salvar como artefato
    - name: Terraform Show
      if: always()
      id: show
      run: terraform show -no-color tfplan > plan.txt

    - name: Upload Plan as Artifact
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plan
        path: ./infra/plan.txt
        retention-days: 5

    # Adicionar coment√°rio do plano ao PR
    - name: Add Plan to PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const plan = fs.readFileSync('./infra/plan.txt', 'utf8');
          const MAX_COMMENT_SIZE = 65536;
          let planSummary = plan.length > MAX_COMMENT_SIZE 
            ? plan.substring(0, MAX_COMMENT_SIZE) + '\n\n... (Sa√≠da truncada, veja o artefato do plano anexado para o plano completo)'
            : plan;
          
          const comment = `## Plano do Terraform üìù\n
          \`\`\`terraform\n
          ${planSummary}
          \`\`\`\n
          *Autor: @${context.payload.pull_request.user.login}, A√ß√£o: ${context.eventName}*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          })
